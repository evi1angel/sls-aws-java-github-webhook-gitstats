service: aws-java-github-webhook-lcold

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  profile: sls
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-stats
    STATS_FUNCTION_NAME: ${self:service}-${self:provider.stage}-webhook
  iamRoleStatements:
  - Effect: Allow
    Action:
    - lambda:InvokeFunction
    Resource: "*"
  - Effect: Allow
    Action:
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  artifact: build/distributions/aws-java-github-webhook-gitstats.zip

functions:
  cron:
    handler: stats.StartStats
    events:
    - schedule: rate(2 hours)
    layers:
    - {Ref: DependenciesLambdaLayer}

  webhook:
    handler: com.serverless.ApiGatewayHandler
    timeout: 30 # max API Gateway timeout
    events:
    - http:
        path: webhook
        method: post
        cors: true
    layers:
    # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
    - {Ref: DependenciesLambdaLayer}

layers:
  dependencies:
    path: build/layer

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        -
          AttributeName: duration
          AttributeType: N
        -
          AttributeName: timestamp
          AttributeType: N
        KeySchema:
        -
          AttributeName: duration
          KeyType: HASH
        -
          AttributeName: timestamp
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

